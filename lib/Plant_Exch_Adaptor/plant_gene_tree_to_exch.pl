#------------------------------------------------------------------------------#
# Documentation Section                                                        #
#------------------------------------------------------------------------------#

=head1 NAME

plant_gene_tree_exch.pl - transforms plant compara genetree data into KB tree exchange format.

=head1 SYNOPSIS

 plant_gene_tree_exch.pl [--? --m] --i --a
   --i <input tree file from compara pipeline (e.g. Compara.newick_trees.19.emf)>
   --a <alignment file in exchange format (AlignmentRow.tab)>

=head1 DESCRIPTION

This scripts accepts ensembl compara pipeline generated gramene tree file
in newick format and transforms it into the required KBase tree exchange format.

=head1 OPTIONS

=over 4

=item B<--i>

        Required parameter to input compara pipeline generated newick tree file,e.g.
        (e.g. Compara.newick_trees.19.emf).

=item B<--a>

        Required parameter to input KBase tree exchange format file named
        AlignmentRow.tab generated by plant_gene_aln_to_exch.pl script.

=item B<--help or -? or -h>

        Print quick help message on using plant_gene_tree_exch.pl and exit

=item B<--man or -m>

        Print complete documentation on using plant_gene_tree_exch.pl and exit

=back

=head1 AUTHOR

Dr. Sunita Kumari

=head1 DATE

Fri Sep 6 14:15:09 EST 2013

=head1 USAGE EXAMPLE

How to use plant_gene_tree_exch.pl
 perl plant_gene_tree_exch.pl --i=Compara.newick_trees.emf --a=AlignmentRow.tab
 perl plant_gene_tree_exch.pl --m # use this option only to read the documentation

=cut

#------------------------------------------------------------------------------#
# Import Section: Import perl modules on which this script depends             #
#------------------------------------------------------------------------------#
use Getopt::Long;
use Pod::Usage;
use warnings;
use File::Path qw(make_path);

#------------------------------------------------------------------------------#
# Boiler plate code for extracting command-line options & displaying help/man  #
#------------------------------------------------------------------------------#

my $help;
my $man;
my %opts = ("help" => \$help, "man" => \$man);
Getopt::Long::Configure("bundling", "auto_abbrev");
GetOptions(\%opts, "help|?|h", "man|m", "i=s", "a=s");
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

#------------------------------------------------------------------------------#
# Start: plant_gene_tree_exch.pl Main Logic                                    #
#------------------------------------------------------------------------------#

# Common Data Fields
my $inFile = $opts{'i'} || die pod2usage(2);  # input file: Compara.newick_trees.emf
my $alnFile = $opts{'a'} || die pod2usage(2); # AlignmentRow.tab file

my $dir = undef;
opendir(D, ".");
while(my $file = readdir(D)) {
	if($file eq "Raw_Tree_Files") {
		$dir = $file;
		last;
	}
}
if(!defined($dir)) {
	$dir = "./Raw_Tree_Files";
	make_path($dir) || die "Failed to create $dir directory\n";
}

my %kbAlnIds = ();
open(IN, "<$alnFile");
while(<IN>) {
	my @a = split /\t/;
	if($a[1] >= 1 && $a[1] <= 3) { # trying to reduce the number of redundant mappings for a KB|aln.nnn
		$kbAlnIds{$a[2]} = $a[0];
	}
}
close IN;

open(IN, "<$inFile");
open(T, ">Tree.tab");
open(TA, ">TreeAttribute.tab");
my $kbPre = "kb_tree.";
my $treeFileCtr = 0;
$/ = "//\n";                     # change default record separator.
while(<IN>) {
	chomp;
	$treeFileCtr++;
	# Fields for Tree.tab file
	# kb-tree-id	 M	 unique kbase id reserved for the tree from ID server: 'kb|tree.XXXXX'
	# kb-aln-id	 M	 the kbase id of the alignment from which this tree was built
	# status	 M	 string indicating if the tree is "active", "superseded" or "bad"
	# data-type	 M	 lowercase string indicating the type of data this tree is built from; we set this to "sequence_alignment" for all alignment-based trees, but we may support "taxonomy", "gene_content" trees and more in the future
	# timestamp	 M	 the time at which this tree was loaded into KBase. Other timestamps can be added to TreeAttribute; the time format is an integer indicating seconds since epoch
	# method	 R	 string that either maps to another object that captures workflows, or is simple alignment method name, e.g. "MOPipeline"
	# parameters	 R	 free form string that might be a hash to provide additional tree parameters e.g., the program option values used
	# protocol	 O	 human readable description of the tree, if needed
	# source-db	 M	 the database where this tree originated, eg MO, SEED
	# source-db-tree-id	 M	 the id of this tree in the original database
	my $kbTreeId = $kbPre.$treeFileCtr;  # Required; unique kbase id reserved for the alignment from ID server
	my $id = "";                         # Required
	my $status = "active";               # Required
	my $dataType = "sequence_alignment"; # Required
	my $ts = time();                     # Required# get the timestamp in seconds since epoch
	my $method = "ComparaPipeline";      # Recommended
	my $params = "";                     # Recommended
	my $protocol = "";                   # Optional
	my $srcDb = "Gramene";               # Required
	my $srcDbAlnId = "AskGrameneTeam:source-db-tree-id";             # Required
	
	my @temp = split(/\n/, $_);
	my @a = split(/\s/,$temp[0]);
	for(my $i = 1; $i < 6; $i++) {
		if(length($id) == 0) {
			$id = $a[$i];
		} else {
			$id .= "-".$a[$i];
		}
	}
	die "No matching KB|aln.nnn record found for tree# $treeFileCtr in $inFile file\n" if(length($id) == 0);
	my $kbAlnId = $kbAlnIds{$id};
	print T "$kbTreeId\t$kbAlnId\t$status\t$dataType\t$ts\t$method\t$params\t$protocol\t$srcDb\t$srcDbAlnId\n";
	my $fn = "$dir/$kbPre$treeFileCtr.tree";
	open(O, ">$fn");
	print O $temp[$#temp], "\n";
	close(O);
	print TA "$kbTreeId\trooted\tAskGrameneIf_Outgroup_OR_Midpoint\n";
	print TA "$kbTreeId\tbranch_length\tAskGrameneIf_\"Replacements per position\"OR\"Arbitrary units\"OR\"Million years\"\n";
	print TA "$kbTreeId\tstyle\tAskGrameneIf_\"Cladogram\"OR\"Phylogram\"OR\"Phenogram\"\n";
	print TA "$kbTreeId\tbootstrap_type\tAskGrameneIf_\"Felsenstein 1985\"OR\"aLRT SH-like branch support\"OR\"Bayesian posterior probability\"\n";
	print TA "$kbTreeId\tcopyright\t\n";
last if($treeFileCtr == 4);
}
close(T);
close(TA);