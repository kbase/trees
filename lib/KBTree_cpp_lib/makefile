# This makefile constructs and compiles the C++ KBTree Library Swig interface for Java
# and Perl.  It is tested on Mac and Linux, and is not currently supported in Windows.
# Most build files are placed in the lib directory under the appropriate interface sub-
# directory.  Code that is actually edited is in the src directory (except for the .cxx files, which
# are src files generated by swig.  If you have Swig installed you can remake the swig files
# with "make swig" and "make clean-swig" commands.
# Otherwise, "make all" simply builds assuming the swig files are present, which is the
# advised building path because you do not have to install swig locally.
#
# Note that right now the Java Header Path for linux is hard coded to match the KBase-v10 Image.
#
# Also note that targets/prerequisites are not set properly, so everything will be remade each time
# a call is executed.  This is fine though because the build takes but a couple seconds.


# SET BASIC PATHS AND FILE NAMES WE WOULD LIKE TO USE
OUT_DIR := lib
SRC_PATH := src
SWIG_FILE := $(SRC_PATH)/kbtree.i
SWIG_PERL_WRAP_FILE := $(SRC_PATH)/kbtree_perl_wrap.cxx
SWIG_JAVA_WRAP_FILE := $(SRC_PATH)/kbtree_java_wrap.cxx

# DETERMINE IF WE ARE MAC OR LINUX (this is clearly a hack, a better option would
# be to actually write a configure script)
UNAME := $(shell uname)

ifeq ($(UNAME),Darwin)
PERL_CC_OPTIONS := $(shell perl -MExtUtils::Embed -e ccopts)
PERL_LD_OPTIONS := $(shell perl -MExtUtils::Embed -e ldopts)
PERL_LIB_CMD := -bundle -o $(OUT_DIR)/perl_interface/KBTreeUtil.bundle
JAVA_HEADER_PATH := $(shell javaconfig Headers)
JAVA_LIB_CMD := -framework JavaVM -bundle -o $(OUT_DIR)/java_interface/libKBTreeUtil.jnilib
else ifeq ($(UNAME),Linux)
PERL_CC_OPTIONS := $(shell perl -MConfig -e 'print join(" ", @Config{qw(ccflags optimize cccdlflags)}, "-I$$Config{archlib}/CORE")')
PERL_LD_OPTIONS := $(shell perl -MConfig -e 'print $$Config{lddlflags}')
PERL_LIB_CMD := -shared -o $(OUT_DIR)/perl_interface/TreeCppUtil.so
JAVA_HEADER_PATH := "/usr/lib/jvm/java-7-openjdk-amd64/include"
JAVA_LIB_CMD := -shared -o $(OUT_DIR)/java_interface/libKBTreeUtil.so
endif


.PHONY : clean

.PHONY : clean-swig

all: perl-lib java-lib


swig:
	mkdir -p $(OUT_DIR)/perl_interface/Bio/KBase/Tree
	swig -c++ -perl5 -module "Bio::KBase::Tree::TreeCppUtil" -outdir $(OUT_DIR)/perl_interface/ -o $(SWIG_PERL_WRAP_FILE) $(SWIG_FILE)
	mv $(OUT_DIR)/perl_interface/TreeCppUtil.pm $(OUT_DIR)/perl_interface/Bio/KBase/Tree/TreeCppUtil.pm
	swig -c++ -java -outdir $(OUT_DIR)/java_interface/KBTreeUtil -package KBTreeUtil -o $(SWIG_JAVA_WRAP_FILE) $(SWIG_FILE)

clean-swig:
	rm -f $(SWIG_PERL_WRAP_FILE)
	rm -f $(SWIG_JAVA_WRAP_FILE)
	rm -f $(OUT_DIR)/perl_interface/*.pm
	rm -f $(OUT_DIR)/java_interface/KBTreeUtil/*.java


# this will always link, even if object files are built
perl-lib : $(OUT_DIR)/perl_interface/kbtree_wrap.o $(OUT_DIR)/perl_interface/kbtree.o
	g++ $(PERL_LIB_CMD) $(OUT_DIR)/perl_interface/kbtree_wrap.o $(OUT_DIR)/perl_interface/kbtree.o $(PERL_LD_OPTIONS)
$(OUT_DIR)/perl_interface/kbtree_wrap.o : $(SWIG_PERL_WRAP_FILE)
	g++ -fpic -O3 -c $(SWIG_PERL_WRAP_FILE) $(PERL_CC_OPTIONS) -o $(OUT_DIR)/perl_interface/kbtree_wrap.o
$(OUT_DIR)/perl_interface/kbtree.o : $(SRC_PATH)/kbtree/kbtree.cpp
	g++ -fpic -O3 -c $(SRC_PATH)/kbtree/kbtree.cpp -o $(OUT_DIR)/perl_interface/kbtree.o $(PERL_CC_OPTIONS)

# this will always link and compile, even if object files are built
java-lib : $(OUT_DIR)/java_interface/kbtree_wrap.o $(OUT_DIR)/java_interface/kbtree.o
	g++ $(JAVA_LIB_CMD) $(OUT_DIR)/java_interface/kbtree_wrap.o $(OUT_DIR)/java_interface/kbtree.o
	javac $(OUT_DIR)/java_interface/KBTreeUtil/KBTreeUtilJNI.java $(OUT_DIR)/java_interface/KBTreeUtil/KBTree.java $(OUT_DIR)/java_interface/KBTreeUtil/KBTreeUtil.java
$(OUT_DIR)/java_interface/kbtree_wrap.o : $(SWIG_JAVA_WRAP_FILE)
	g++ -fpic -O3 -c $(SWIG_JAVA_WRAP_FILE) -I$(JAVA_HEADER_PATH) -o $(OUT_DIR)/java_interface/kbtree_wrap.o -fno-strict-aliasing
$(OUT_DIR)/java_interface/kbtree.o : $(SRC_PATH)/kbtree/kbtree.cpp
	g++ -fpic -O3 -c $(SRC_PATH)/kbtree/kbtree.cpp -o $(OUT_DIR)/java_interface/kbtree.o -fno-strict-aliasing



clean:
	rm -f $(OUT_DIR)/java_interface/*.jnilib $(OUT_DIR)/java_interface/*.o $(OUT_DIR)/java_interface/KBTreeUtil/*.class 
	rm -f $(OUT_DIR)/java_interface/*.so
	rm -f $(OUT_DIR)/perl_interface/*.o $(OUT_DIR)/perl_interface/*.bundle $(OUT_DIR)/perl_interface/*.so
