
v2 - 2012-06-28

This is a working draft of a proposed schema for a CDM extension to support Trees
and Multiple Sequence Alignments.  In this proposal, KBase IDs are required for
each unique Alignment and Tree, but local IDs (possibly from original namespace)
are used for Node Ids and Alignment Row Ids.  Leaf node Ids must map to a cooresponding
Alignment Row Id.  The Id must be unique only within the specific Tree/Alignment.
Therefore


Alignment
=====================================
-kb_alignment_id (will be a unique kbase id: 'kb|aln.XXXXX')
-fasta_alignment (link to raw alignment fasta file; first word of every sequence definition must be unique in this file)
-n_rows (number of rows in the alignment)
-n_cols (number of columns in the alignment; allows assessing coverage in rows)
-active (boolean value set to true for all imported alignments, can be set to false when an Alignment becomes out-of-date)
-superseded_by (indicates the recommended replacement; may be next Alignment in a series, not necessarily the most recent)
-is_concatenation (boolean value that indicates if leaves map to single sequences, or multiple sequences)
-sequence_type (integer value indicating the type of sequence.  Initial support should include 0=protein, 1=DNA).
-timestamp (the time at which this alignment was loaded into KBase.  Other timestamps can be added to AlignmentMetaData)
-method (string that either maps to another database, to capture workflows, or is a simple method name, e.g. "MOPipeLine")
-parameters (free form string that might be a hash to provide additional alignment parameters e.g., the program option values used)
-protocol (human readable description of the protocol, how did you get here with these sequences?)
-source_db (for indicating, if needed, where this alignment originated from, eg MO, SEED)
-source_db_alignment_id (for indicating the ID in the db where this alignment originated from)


AlignmentMetaData
=====================================
-kb_alignment_id (maps this meta data to an alignment)
-key (string)
-value (blob)


AlignmentRowDescription
=====================================
-kb_alignment_id (maps this row to a particular alignment)
-alignment_row (row number in the alignment file, count starts at '1')
-row_id (first word of description copied from original fasta file; must be unique within this alignment)
-row_description (text description copied from original fasta file if it exists)
-n_components (the number of components (e.g. concatenated sequences) that make up this alignment row)
-start_pos_in_alignment (the column (index starting at pos '1') in the alignment where this sequence row begins)
-end_pos_in_alignment (the column (index starting at pos '1') in the alignment where this sequence row ends)


AlignmentRowComponent
=====================================
-kb_alignment_id (maps this component to a particular alignment)
-alignment_row (row number in alignment file, count starts at '1')
-concatenation_order (ordering starting from left to right in alignment row starting at '1')
-sequence_id (MD5 for protein or contig sequence)
-sequence_source_db (external database where this sequence can be found)
-sequence_source_db_id (id in the external database where this sequence can be found)
-begin (the alignment includes the original sequence starting at this postion, 1-based)
-end (the alignment includes the original sequence ending at this postion, 1-based)
-untrimmed_source_sequence_len (integer indicating length of original sequence)
-start_pos_in_alignment (integer value providing a coordinate/mapping to the starting column in the alignment where this sequence component begins)
-end_pos_in_alignment (integer value providing a coordinate/mapping to the ending column in the alignment where this sequence component ends)


Tree
=====================================
-kb_tree_id (will be a unique kbase id: e.g. 'kb|tree.XXXX')
-newick_tree (link to a file; first word in leaf node name is leaf_id, must be unique in tree, and be identical to the corresponding row_id key in the AlignmentRowDescription table; if tree includes [ and/or ] inside a comment, there must be a rule for parsing)
-kb_alignment_id (will be a mapping to the alignment that was used to build this tree)
-timestamp (time when tree was added to KBase)
-active (boolean value set to true for all imported alignments, can be set to false when a Tree becomes out-of-date)
-superseded_by (indicates the recommended replacement; may be next Tree in a series, not necessarily the most recent)
-method (string that either maps to another database, to capture workflows, or is a simple method name, e.g. "MOPipeLine")
-protocol (human readable summary)
-source_db (for indicating, if needed, where this tree originated from, eg MO, SEED)
-source_db_tree_id (for indicating the ID in the db where this tree originated from)


TreeMetaData
=====================================
-kb_tree_id (maps this meta data to a tree)
-key (string)
-value (blob)


TreeNodeMetaData (provides a method to annotate nodes without associated alignment)
=====================================
-kb_tree_id (will be a unique kbase id: e.g. 'kb|tree.XXXX')
-node_id (includes leaf ids)
-key (is_leaf could be used to ensure that all labeled nodes are indexed)
-value (blob)


