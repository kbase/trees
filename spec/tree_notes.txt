

2012, June 4
Meeting with Fangfang, Keith, and Michael at JGI
=======================================

- Should we use ER model calls or direct SQL calls?  What database/server do we connect to? ask Bruce.
- Current SEED had performance issues in looking up IDs at leaves, solved by Bob's caching scheme
- How do we ensure performance / how do we have tables precomputed for performance?  And if we have
such tables, how do we ensure that it is kept up do date?  ask Bob.
- How do we link to existing entities / relationships in the system?  Simply use kbase ids wih the ID
sever as a hook to access other data.
- How do we validate trees?  Provide a service that accepts a tree and validates node labels point to
a valid object, returning errors or warnings if labels are not found.  Might be able to validate trees
in different ways based on what the IDs point to.
-How do we deal with private or local data that is added/deleted? How do we work with the Tinystore?
First we will ignore adding/removing trees from the datastore, even though some users will want this
capability to share tree information.  We will assume that users will query, get a tree, work with the
tree locally, perhaps sending the tree back and forth to decorate it, etc.
-How will we store alignments?  As flat files which effectively deals with white space, and can be compressed
-How are we going to modify the tree-building workflow?  At some point, will KBase have its own workflow for
building trees, but regardless we need parsers and a data exchange format that can convert MO/SEED trees to


next steps:
1) mike, keith, gavin: talk to Tom about details of the CDS and TinyStore, and how kbase plans to allow us to query against it
2) fangfang: talk to Bob about getting a development environment for working with the ER model
3) fangfang, mike, keith: provide ER diagram to Bruce
4) all: describe use cases to accompany the API spec, and to circulate to potential tree users
5) Fangfang is meeting with Gary on June 26 to get feedback - we need complete proposal by then (and ideally sent around earlier)


2012, June 15
Meeting with Fangfang, Michael, Bruce at Argonne
=======================================
- best strategy is to develop an exchange format for Trees, give the format to Bruce, and iterate to produce the ER model and default client libs
- exchange format will include local IDs
- running locally the entire ER database build process would be great, but is currently difficult


2012, June 22
Conference call with Fangfang and Michael
=======================================
Discussion of the Exchange format led to the following points / questions:
1) move "is_protein" to alignment table because each alignment should be of a single type
2) note in exchange format that row components must be listed in a correct order
3) add additional commment to clarify that "begin" and "end" fields are on original sequence.
4) ask keith what is already loaded into kbase: Answer: Tom wrote scripts that copies basic genomic information from current MO build.
5) load new vs. additional data: ask bruce to enforce if source id is already loaded, then don't load the record
6) add source_db to alignment and tree exchange files, even though it is redundant
7) are alignments available from MO?? ask keith: Answer: yes, in phylip format.
8) add begin and end fields in in alignment_row_component to map where in the alignment the sequence maps to.
9) nodes in tree will point just up to the row number in the kbase ID...
10) in newick tree before load, point to alignment id (in original namespace) and a row number
11) switch alignment_id with alignment_source_id in alignment_row_component
12) timestamp should be when tree was added to kbase, and meta data to store other timestamps if needed
13) new trees and alignments are assumed active until they are turned inactive manually (api should provide access to modify this field)
14) ask keith if there is a flag that says if a gene is in a tree or not: Answer: no, but can use locus2tree for that information.

